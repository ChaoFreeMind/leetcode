Problem: 
// Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes),
// write a function to find the number of connected components in an undirected graph.

// Example 1:
//      0          3
//      |          |
//      1 --- 2    4
// Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

// Example 2:
//      0           4
//      |           |
//      1 --- 2 --- 3
// Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

// Note:
// You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

For this problem we can use union find algorithm discuessed: https://www.youtube.com/playlist?list=PLe-ggMe31CTexoNYnMhbHaWhQ0dvcy43t

First we have to build up the connections between each one of the nodes, union(p, q) change each one of the value in the array 
that has the same value of p to q.

private void union(int p, int q) {
	int pid = id[p];
	int qid = id[q];
	for(int i = 0; i < id.length; i++) {
		if(pid == id[i]) {
			id[i] = qid;
		}
	}
}

After building the relationship array, we can easily get the number of conected componenets.